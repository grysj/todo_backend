// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: list.sql

package db

import (
	"context"
)

const createList = `-- name: CreateList :one
INSERT INTO lists (
    created_by,
    title
) VALUES (
    $1, $2
) RETURNING list_id, created_by, title, created_at
`

type CreateListParams struct {
	CreatedBy int32  `json:"created_by"`
	Title     string `json:"title"`
}

func (q *Queries) CreateList(ctx context.Context, arg CreateListParams) (List, error) {
	row := q.db.QueryRowContext(ctx, createList, arg.CreatedBy, arg.Title)
	var i List
	err := row.Scan(
		&i.ListID,
		&i.CreatedBy,
		&i.Title,
		&i.CreatedAt,
	)
	return i, err
}

const editTile = `-- name: EditTile :exec
UPDATE lists SET title=$2
WHERE list_id = $1
`

type EditTileParams struct {
	ListID int32  `json:"list_id"`
	Title  string `json:"title"`
}

func (q *Queries) EditTile(ctx context.Context, arg EditTileParams) error {
	_, err := q.db.ExecContext(ctx, editTile, arg.ListID, arg.Title)
	return err
}

const getList = `-- name: GetList :one
SELECT list_id, created_by, title, created_at from lists
WHERE list_id = $1
`

func (q *Queries) GetList(ctx context.Context, listID int32) (List, error) {
	row := q.db.QueryRowContext(ctx, getList, listID)
	var i List
	err := row.Scan(
		&i.ListID,
		&i.CreatedBy,
		&i.Title,
		&i.CreatedAt,
	)
	return i, err
}
