// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: list_points.sql

package db

import (
	"context"
	"time"

	"github.com/lib/pq"
)

const checkPoint = `-- name: CheckPoint :exec
UPDATE list_points SET checked=true
WHERE point_id = $1
`

func (q *Queries) CheckPoint(ctx context.Context, pointID int32) error {
	_, err := q.db.ExecContext(ctx, checkPoint, pointID)
	return err
}

const createPoint = `-- name: CreatePoint :one
INSERT INTO list_points (
    list_id,
    point
) VALUES (
    $1, $2
) RETURNING point_id, list_id, point, checked, created_at
`

type CreatePointParams struct {
	ListID int32    `json:"list_id"`
	Point  []string `json:"point"`
}

func (q *Queries) CreatePoint(ctx context.Context, arg CreatePointParams) (ListPoint, error) {
	row := q.db.QueryRowContext(ctx, createPoint, arg.ListID, pq.Array(arg.Point))
	var i ListPoint
	err := row.Scan(
		&i.PointID,
		&i.ListID,
		pq.Array(&i.Point),
		&i.Checked,
		&i.CreatedAt,
	)
	return i, err
}

const uncheckPoint = `-- name: UncheckPoint :exec
UPDATE list_points SET checked=false
WHERE point_id = $1
`

func (q *Queries) UncheckPoint(ctx context.Context, pointID int32) error {
	_, err := q.db.ExecContext(ctx, uncheckPoint, pointID)
	return err
}

const userPoints = `-- name: UserPoints :many
SELECT l.list_id, l.title, lp.point_id, lp.point, lp.checked, lp.created_at
FROM lists l
JOIN list_points lp ON l.list_id = lp.list_id
WHERE l.list_id IN (
    SELECT p.list_id
    FROM permissions p
    WHERE p.user_id = $1
)
ORDER BY l.created_at ASC, lp.created_at ASC
`

type UserPointsRow struct {
	ListID    int32     `json:"list_id"`
	Title     string    `json:"title"`
	PointID   int32     `json:"point_id"`
	Point     []string  `json:"point"`
	Checked   bool      `json:"checked"`
	CreatedAt time.Time `json:"created_at"`
}

func (q *Queries) UserPoints(ctx context.Context, userID int32) ([]UserPointsRow, error) {
	rows, err := q.db.QueryContext(ctx, userPoints, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []UserPointsRow{}
	for rows.Next() {
		var i UserPointsRow
		if err := rows.Scan(
			&i.ListID,
			&i.Title,
			&i.PointID,
			pq.Array(&i.Point),
			&i.Checked,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
