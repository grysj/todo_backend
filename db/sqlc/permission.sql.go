// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: permission.sql

package db

import (
	"context"
)

const addPermission = `-- name: AddPermission :one
INSERT INTO permissions (
    from_user,
    to_user,
    perm_type)
VALUES ($1, $2, $3)
RETURNING permission_id, from_user, to_user, list_id, perm_type, created_at
`

type AddPermissionParams struct {
	FromUser int32 `json:"from_user"`
	ToUser   int32 `json:"to_user"`
	PermType int32 `json:"perm_type"`
}

func (q *Queries) AddPermission(ctx context.Context, arg AddPermissionParams) (Permission, error) {
	row := q.db.QueryRowContext(ctx, addPermission, arg.FromUser, arg.ToUser, arg.PermType)
	var i Permission
	err := row.Scan(
		&i.PermissionID,
		&i.FromUser,
		&i.ToUser,
		&i.ListID,
		&i.PermType,
		&i.CreatedAt,
	)
	return i, err
}

const checkUserPermission = `-- name: CheckUserPermission :one
SELECT COALESCE(4, p.perm_type ) FROM permissions p
WHERE from_user = $1 AND list_id = $2
`

type CheckUserPermissionParams struct {
	FromUser int32 `json:"from_user"`
	ListID   int32 `json:"list_id"`
}

func (q *Queries) CheckUserPermission(ctx context.Context, arg CheckUserPermissionParams) (int32, error) {
	row := q.db.QueryRowContext(ctx, checkUserPermission, arg.FromUser, arg.ListID)
	var perm_type int32
	err := row.Scan(&perm_type)
	return perm_type, err
}

const checkUserPermissions = `-- name: CheckUserPermissions :one
SELECT permission_id, from_user, to_user, list_id, perm_type, created_at FROM permissions
WHERE to_user = $1
`

func (q *Queries) CheckUserPermissions(ctx context.Context, toUser int32) (Permission, error) {
	row := q.db.QueryRowContext(ctx, checkUserPermissions, toUser)
	var i Permission
	err := row.Scan(
		&i.PermissionID,
		&i.FromUser,
		&i.ToUser,
		&i.ListID,
		&i.PermType,
		&i.CreatedAt,
	)
	return i, err
}

const createPermission = `-- name: CreatePermission :one
INSERT INTO permissions (
    from_user,
    to_user,
    list_id,
    perm_type
) VALUES (
    $1, $2, $3, $4
) RETURNING permission_id, from_user, to_user, list_id, perm_type, created_at
`

type CreatePermissionParams struct {
	FromUser int32 `json:"from_user"`
	ToUser   int32 `json:"to_user"`
	ListID   int32 `json:"list_id"`
	PermType int32 `json:"perm_type"`
}

func (q *Queries) CreatePermission(ctx context.Context, arg CreatePermissionParams) (Permission, error) {
	row := q.db.QueryRowContext(ctx, createPermission,
		arg.FromUser,
		arg.ToUser,
		arg.ListID,
		arg.PermType,
	)
	var i Permission
	err := row.Scan(
		&i.PermissionID,
		&i.FromUser,
		&i.ToUser,
		&i.ListID,
		&i.PermType,
		&i.CreatedAt,
	)
	return i, err
}

const deletePermission = `-- name: DeletePermission :exec
DELETE from permissions p
WHERE p.permission_id = $1
`

func (q *Queries) DeletePermission(ctx context.Context, permissionID int32) error {
	_, err := q.db.ExecContext(ctx, deletePermission, permissionID)
	return err
}

const editPermission = `-- name: EditPermission :exec
UPDATE permissions SET perm_type = $2
WHERE permission_id = $1
`

type EditPermissionParams struct {
	PermissionID int32 `json:"permission_id"`
	PermType     int32 `json:"perm_type"`
}

func (q *Queries) EditPermission(ctx context.Context, arg EditPermissionParams) error {
	_, err := q.db.ExecContext(ctx, editPermission, arg.PermissionID, arg.PermType)
	return err
}

const listPermissions = `-- name: ListPermissions :many
SELECT p.to_user, p.perm_type FROM permissions p
WHERE p.list_id = $1
`

type ListPermissionsRow struct {
	ToUser   int32 `json:"to_user"`
	PermType int32 `json:"perm_type"`
}

func (q *Queries) ListPermissions(ctx context.Context, listID int32) ([]ListPermissionsRow, error) {
	rows, err := q.db.QueryContext(ctx, listPermissions, listID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListPermissionsRow{}
	for rows.Next() {
		var i ListPermissionsRow
		if err := rows.Scan(&i.ToUser, &i.PermType); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
